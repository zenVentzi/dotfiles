# ~/.bashrc: executed by bash(1) for non-login shells.
# see /usr/share/doc/bash/examples/startup-files (in the package bash-doc)
# for examples

# If not running interactively, don't do anything
case $- in
    *i*) ;;
      *) return;;
esac

# don't put duplicate lines or lines starting with space in the history.
# See bash(1) for more options
HISTCONTROL=ignoreboth

# append to the history file, don't overwrite it
shopt -s histappend

# for setting history length see HISTSIZE and HISTFILESIZE in bash(1)
HISTSIZE=1000
HISTFILESIZE=2000

# check the window size after each command and, if necessary,
# update the values of LINES and COLUMNS.
shopt -s checkwinsize

# If set, the pattern "**" used in a pathname expansion context will
# match all files and zero or more directories and subdirectories.
#shopt -s globstar

# make less more friendly for non-text input files, see lesspipe(1)
[ -x /usr/bin/lesspipe ] && eval "$(SHELL=/bin/sh lesspipe)"

# set variable identifying the chroot you work in (used in the prompt below)
if [ -z "${debian_chroot:-}" ] && [ -r /etc/debian_chroot ]; then
    debian_chroot=$(cat /etc/debian_chroot)
fi

# set a fancy prompt (non-color, unless we know we "want" color)
case "$TERM" in
    xterm-color|*-256color) color_prompt=yes;;
esac

# uncomment for a colored prompt, if the terminal has the capability; turned
# off by default to not distract the user: the focus in a terminal window
# should be on the output of commands, not on the prompt
#force_color_prompt=yes

if [ -n "$force_color_prompt" ]; then
    if [ -x /usr/bin/tput ] && tput setaf 1 >&/dev/null; then
	# We have color support; assume it's compliant with Ecma-48
	# (ISO/IEC-6429). (Lack of such support is extremely rare, and such
	# a case would tend to support setf rather than setaf.)
	color_prompt=yes
    else
	color_prompt=
    fi
fi

if [ "$color_prompt" = yes ]; then
    PS1='${debian_chroot:+($debian_chroot)}\[\033[01;32m\]\u@\h\[\033[00m\]:\[\033[01;34m\]\w\[\033[00m\]\$ '
else
    PS1='${debian_chroot:+($debian_chroot)}\u@\h:\w\$ '
fi
unset color_prompt force_color_prompt

# If this is an xterm set the title to user@host:dir
case "$TERM" in
xterm*|rxvt*)
    PS1="\[\e]0;${debian_chroot:+($debian_chroot)}\u@\h: \w\a\]$PS1"
    ;;
*)
    ;;
esac

# enable color support of ls and also add handy aliases
if [ -x /usr/bin/dircolors ]; then
    test -r ~/.dircolors && eval "$(dircolors -b ~/.dircolors)" || eval "$(dircolors -b)"
    alias ls='ls --color=auto'
    #alias dir='dir --color=auto'
    #alias vdir='vdir --color=auto'

    alias grep='grep --color=auto'
    alias fgrep='fgrep --color=auto'
    alias egrep='egrep --color=auto'
fi

# colored GCC warnings and errors
#export GCC_COLORS='error=01;31:warning=01;35:note=01;36:caret=01;32:locus=01:quote=01'

# some more ls aliases
alias ll='ls -alF'
alias la='ls -A'
alias l='ls -CF'

# Add an "alert" alias for long running commands.  Use like so:
#   sleep 10; alert
alias alert='notify-send --urgency=low -i "$([ $? = 0 ] && echo terminal || echo error)" "$(history|tail -n1|sed -e '\''s/^\s*[0-9]\+\s*//;s/[;&|]\s*alert$//'\'')"'

# Alias definitions.
# You may want to put all your additions into a separate file like
# ~/.bash_aliases, instead of adding them here directly.
# See /usr/share/doc/bash-doc/examples in the bash-doc package.

if [ -f ~/.bash_aliases ]; then
    . ~/.bash_aliases
fi

# enable programmable completion features (you don't need to enable
# this, if it's already enabled in /etc/bash.bashrc and /etc/profile
# sources /etc/bash.bashrc).
if ! shopt -oq posix; then
  if [ -f /usr/share/bash-completion/bash_completion ]; then
    . /usr/share/bash-completion/bash_completion
  elif [ -f /etc/bash_completion ]; then
    . /etc/bash_completion
  fi
fi

# personal

# export env variable from script without sourcing it (link below)
# https://stackoverflow.com/questions/16618071/can-i-export-a-variable-to-the-environment-from-a-bash-script-without-sourcing-i
# understand variable scope https://www.thegeekstuff.com/2010/05/bash-variables/

# <Esc> in terminal to use vim keys
set -o vi

# Export editors
export EDITOR="nvim"
export VISUAL="nvim"

# alias vs script vs function (link below)
# https://unix.stackexchange.com/questions/30925/in-bash-when-to-alias-when-to-script-and-when-to-write-a-function
# run command shadowed by alias https://unix.stackexchange.com/questions/39291/run-a-command-that-is-shadowed-by-an-alias
# aliases to avoid https://unix.stackexchange.com/a/634057/106455
# Quickly jump to parent directores
alias ..='cd ..'
alias .3='cd ../..'
alias .4="cd ../../.."
alias .5="cd ../../../../"
alias .6="cd ../../../../.."

alias erc="nvim ~/.bashrc"
alias src="source ~/.bashrc"

# pnpm
export PNPM_HOME="/home/zen_ventzi/.local/share/pnpm"
export PATH="$PNPM_HOME:$PATH"
# pnpm end

. "$HOME/.cargo/env"

# Ctrl + r - search through bash history with fzf
# Ctrl + p - edit a file in vim from fzf
# mv dir/** - expand a directory with (**) and select from fzf
# Alt + c - change directory from fzf
# Ctrl + t - insert file from fzf into command
# source https://gist.github.com/sajoku/c3e12d06f5dcb6bca85402dbc46837ab

[ -f ~/.fzf.bash ] && source ~/.fzf.bash
export FZF_DEFAULT_COMMAND='rg --files --no-ignore --hidden --follow --glob "!.git/*"'
bind -x '"\C-p": nvim $(fzf);'

# -----------------------------------------------------------------------------

# Adds, commits, and pushes to git with one command.
function gitgo() {
    # Are we in a directory under source control?
    if [[ ! -d .git ]]; then
        echo "Not a git repository."
    else
        echo "You are in ${PWD}"
        # Are there any changes that need to be committed?
        if git diff-index --quiet HEAD --; then
            echo "Repository is up to date."
        else                
            # Prompt user for commit message
            echo "Enter commit message:"
            read _msg

            # Was a commit message passed?
            if [[ ! "$_msg" ]]; then
                echo "You must include a commit message."
            else
                git add .
                git commit -m "$_msg"
                git push
            fi
        fi
    fi
}

# -----------------------------------------------------------------------------

function chgo() {
    chezmoi re-add 
    cd $(chezmoi source-path)
    gitgo
    cd ~
}

# -----------------------------------------------------------------------------

# Auto-extract based on type
function extract() {
  if [ -f $1 ] ; then
      case $1 in
          *.tar.bz2)    tar xvjf $1     ;;
          *.tar.gz)     tar xvzf $1     ;;
          *.tar.xz)     tar xvfJ $1     ;;
          *.bz2)        bunzip2 $1      ;;
          *.rar)        rar x $1        ;;
          *.gz)         gunzip $1       ;;
          *.tar)        tar xvf $1      ;;
          *.tbz2)       tar xvjf $1     ;;
          *.tgz)        tar xvzf $1     ;;
          *.zip)        unzip $1        ;;
          *.Z)          uncompress $1   ;;
          *.7z)         7z x $1         ;;
          *)            echo "Unrecognized archive $1" ;;
      esac
  else
      echo "$1 is not an extractable file"
  fi
}

# -----------------------------------------------------------------------------

# Set Reminder.
# Allows you to set a reminder via the terminal.
# A dialog box will show when the timer ends.
# reminder() {
#     echo "How many minutes from now do you want the reminder?"
#     read _TIME
#     echo "What should the reminder message say?"
#     read _MSG
#     echo "Reminder set!"
#     sleep ${_TIME}m && zenity --info --text "${_MSG}" >/dev/null 2>&1
# }


# -----------------------------------------------------------------------------

# Define file includes
BASHINCS=(".bash_aliases" ".bash_exports" ".bash_functions" ".bash_linux" ".bash_options" ".bash_mac")

# Load the file includes if they exist
for file in ${BASHINCS[@]}; do
	[ -f $BASEDIR/$file ] && source $BASEDIR/$file;
done
unset file

# -----------------------------------------------------------------------------

export NVM_DIR="$HOME/.nvm"
[ -s "$NVM_DIR/nvm.sh" ] && \. "$NVM_DIR/nvm.sh"  # This loads nvm
[ -s "$NVM_DIR/bash_completion" ] && \. "$NVM_DIR/bash_completion"  # This loads nvm bash_completion
